rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================== HELPER FUNCTIONS ====================
    
    // Check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Check if user is the document owner
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Get organization member data
    function getOrgMember(orgId) {
      return get(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid)).data;
    }
    
    // Check if user is a member of the organization
    function isOrgMember(orgId) {
      return isSignedIn() 
        && exists(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid))
        && getOrgMember(orgId).status == 'active';
    }
    
    // Check if user has specific role or higher
    function hasOrgRole(orgId, role) {
      let member = getOrgMember(orgId);
      return isOrgMember(orgId) && (
        role == 'member' ||
        (role == 'admin' && member.role in ['admin', 'owner']) ||
        (role == 'owner' && member.role == 'owner')
      );
    }
    
    // Check if user can read org data
    function canReadOrg(orgId) {
      return isOrgMember(orgId);
    }
    
    // Check if user can write org data (all members can write)
    function canWriteOrg(orgId) {
      return hasOrgRole(orgId, 'member');
    }
    
    // Check if user can manage org (admin actions only)
    function canManageOrg(orgId) {
      return hasOrgRole(orgId, 'admin');
    }
    
    // Check if user is admin or owner
    function isOrgAdmin(orgId) {
      return hasOrgRole(orgId, 'admin');
    }
    
    // Check if update is only modifying counter fields
    function onlyUpdatingCounters() {
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly([
        'linkCount', 
        'videoCount', 
        'trackedAccountCount',
        'updatedAt'
      ]);
    }
    
    // ==================== USER ACCOUNTS ====================
    
    // Users can only access their own account
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      
      // User preferences
      match /preferences/{document=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // ==================== ORGANIZATIONS ====================
    
    match /organizations/{orgId} {
      // Can read if member
      allow read: if canReadOrg(orgId);
      
      // Can create if signed in (becomes owner automatically)
      // Allow batch writes for creating org + initial member in same transaction
      allow create: if isSignedIn() 
        && request.resource.data.ownerUserId == request.auth.uid
        && request.resource.data.createdBy == request.auth.uid;
      
      // Can update if admin (or if creating initial state with batch write)
      allow update: if canManageOrg(orgId) 
        || (isSignedIn() && request.resource.data.ownerUserId == request.auth.uid);
      
      // Can delete if owner
      allow delete: if hasOrgRole(orgId, 'owner');
      
      // ==================== ORG MEMBERS ====================
      
      match /members/{userId} {
        // Members can read member list
        allow read: if canReadOrg(orgId);
        
        // Admins can manage members, OR user can create themselves as first member
        // OR user accepting an invitation can create their own member doc
        allow create: if canManageOrg(orgId) 
          || (isOwner(userId) && request.resource.data.role == 'owner')
          || (isOwner(userId) && request.resource.data.status == 'active');
        
        // Admins can update members, OR user can update their own lastActiveProjectId
        allow update: if canManageOrg(orgId) 
          || (isOwner(userId) && isOrgMember(orgId));
        
        // Owner can delete members, members can remove themselves
        allow delete: if hasOrgRole(orgId, 'owner') || isOwner(userId);
      }
      
      // ==================== TEAM INVITATIONS ====================
      
      match /invitations/{invitationId} {
        // Members can read invitations (to see pending invites)
        allow read: if canReadOrg(orgId) 
          || (isSignedIn() && request.auth.token.email == resource.data.email);
        
        // Only admins can create invitations
        allow create: if canManageOrg(orgId) 
          && request.resource.data.orgId == orgId
          && request.resource.data.invitedBy == request.auth.uid;
        
        // Admins can update/cancel invitations
        // Invited users can update to accept/decline
        allow update: if canManageOrg(orgId)
          || (isSignedIn() && request.auth.token.email == resource.data.email);
        
        // Only admins can delete invitations
        allow delete: if canManageOrg(orgId);
      }
      
      // ==================== ORG SETTINGS ====================
      
      match /settings/{document=**} {
        allow read: if canReadOrg(orgId);
        allow write: if canManageOrg(orgId);
      }
      
      // ==================== BILLING & SUBSCRIPTION ====================
      
      match /billing/{document=**} {
        // Members can read subscription info
        allow read: if canReadOrg(orgId);
        
        // Only admins can update subscription (or server via Admin SDK)
        allow write: if canManageOrg(orgId);
      }
      
      // ==================== PROJECTS ====================
      
      match /projects/{projectId} {
        // Members can read their org's projects
        allow read: if canReadOrg(orgId);
        
        // Members can create projects
        allow create: if canWriteOrg(orgId) 
          && request.resource.data.orgId == orgId
          && request.resource.data.createdBy == request.auth.uid;
        
        // Admins can update any project fields
        // Members can only update stat counters (linkCount, videoCount, etc.) when creating resources
        allow update: if canManageOrg(orgId)
          || (canWriteOrg(orgId) && onlyUpdatingCounters());
        
        // Only admins can delete projects
        allow delete: if canManageOrg(orgId);
        
        // ==================== PROJECT STATS ====================
        
        match /stats/{statId} {
          allow read: if canReadOrg(orgId);
          allow write: if canManageOrg(orgId);
        }
        
        // ==================== PROJECT TRACKED ACCOUNTS ====================
        
        match /trackedAccounts/{accountId} {
          // All members can read
          allow read: if canReadOrg(orgId);
          
          // All members can create accounts
          allow create: if canWriteOrg(orgId) 
            && request.resource.data.addedBy == request.auth.uid;
          
          // Only admins can update/delete accounts
          allow update, delete: if canManageOrg(orgId);
          
          match /videos/{videoId} {
            // All members can read
            allow read: if canReadOrg(orgId);
            
            // All members can create videos
            allow create: if canWriteOrg(orgId);
            
            // Only admins can update/delete videos
            allow update, delete: if canManageOrg(orgId);
          }
        }
        
        // ==================== PROJECT LINKS ====================
        
        match /links/{linkId} {
          // All members can read
          allow read: if canReadOrg(orgId);
          
          // All members can create links
          allow create: if canWriteOrg(orgId) 
            && request.resource.data.createdBy == request.auth.uid;
          
          // Only admins can update/delete links
          allow update, delete: if canManageOrg(orgId);
          
          match /clicks/{clickId} {
            // All members can read analytics
            allow read: if canReadOrg(orgId);
            
            // Public API can create click events (via redirect handler)
            allow create: if true;
            
            // Clicks are immutable
            allow update, delete: if false;
          }
        }
        
        // ==================== PROJECT VIDEOS ====================
        
        match /videos/{videoId} {
          // All members can read
          allow read: if canReadOrg(orgId);
          
          // All members can create videos
          allow create: if canWriteOrg(orgId);
          
          // Only admins can update/delete videos
          allow update, delete: if canManageOrg(orgId);
        }
        
        // ==================== PROJECT TRACKING RULES ====================
        
        match /trackingRules/{ruleId} {
          // All members can read rules
          allow read: if canReadOrg(orgId);
          
          // All members can create rules
          allow create: if canWriteOrg(orgId) 
            && request.resource.data.organizationId == orgId
            && request.resource.data.projectId == projectId
            && request.resource.data.createdBy == request.auth.uid;
          
          // Only admins can update/delete rules
          allow update, delete: if canManageOrg(orgId);
        }
      }
      
      // ==================== TRACKED ACCOUNTS (Legacy - for migration) ====================
      
      match /trackedAccounts/{accountId} {
        // All members can read
        allow read: if canReadOrg(orgId);
        
        // All members can create accounts
        allow create: if canWriteOrg(orgId) 
          && request.resource.data.orgId == orgId
          && request.resource.data.addedBy == request.auth.uid;
        
        // Only admins can update/delete accounts
        allow update, delete: if canManageOrg(orgId);
      }
      
      // ==================== VIDEOS ====================
      
      match /videos/{videoId} {
        // All members can read
        allow read: if canReadOrg(orgId);
        
        // All members can create videos
        allow create: if canWriteOrg(orgId) 
          && request.resource.data.orgId == orgId
          && request.resource.data.addedBy == request.auth.uid;
        
        // Only admins can update/delete videos
        allow update, delete: if canManageOrg(orgId);
        
        // ==================== VIDEO SNAPSHOTS ====================
        
        match /snapshots/{snapshotId} {
          // All members can read snapshots
          allow read: if canReadOrg(orgId);
          
          // All members can create snapshots (for manual refresh)
          // Cloud Functions can also create (via Admin SDK, bypasses rules)
          allow create: if canWriteOrg(orgId) 
            && request.resource.data.capturedBy == request.auth.uid;
          
          // Snapshots are immutable after creation
          allow update, delete: if false;
        }
      }
      
      // ==================== TRACKED LINKS ====================
      
      match /links/{linkId} {
        // All members can read
        allow read: if canReadOrg(orgId);
        
        // All members can create links
        allow create: if canWriteOrg(orgId) 
          && request.resource.data.orgId == orgId
          && request.resource.data.createdBy == request.auth.uid;
        
        // Only admins can update/delete links
        allow update, delete: if canManageOrg(orgId);
        
        // ==================== LINK CLICKS ====================
        
        match /clicks/{clickId} {
          // All members can read click analytics
          allow read: if canReadOrg(orgId);
          
          // Public API can create click events (via redirect handler)
          allow create: if true;
          
          // Clicks are immutable
          allow update, delete: if false;
        }
      }
    }
    
    // ==================== PUBLIC LINK REDIRECTS ====================
    
    // Public collection for link shortcode -> orgId/linkId lookup
    // This allows unauthenticated users to resolve short links
    match /publicLinks/{shortCode} {
      allow read: if true; // Public read for redirects
      allow create: if isSignedIn(); // Authenticated users can create
      allow update, delete: if false; // Immutable after creation
    }
    
    // ==================== COLLECTION GROUP QUERIES ====================
    
    // Allow users to query their own memberships across all organizations
    match /{path=**}/members/{memberId} {
      allow read: if isSignedIn() && 
        (request.auth.uid == memberId || 
         resource.data.userId == request.auth.uid);
    }
    
    // Allow users to query their own invitations across all organizations
    match /{path=**}/invitations/{invitationId} {
      allow read: if isSignedIn() && 
        request.auth.token.email == resource.data.email;
    }
  }
}

